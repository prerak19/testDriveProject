{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/encora/Documents/projects/testDrive/tdn/components/pick-date-time/dropDown.js\";\n\n/** @format */\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ddStyles from \"./../../styles/Dropdown.module.css\";\nimport FontAwesome from \"react-fontawesome\";\nimport moment from \"moment\";\n\nconst Dropdown = props => {\n  const {\n    0: isOpen,\n    1: setIsOpen\n  } = useState(false);\n  const dropdownRef = useRef(null);\n\n  const toggleList = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    // only adds the event listener when the dropdown is opened\n    if (!isOpen) return;\n\n    function handleClose(event) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    }\n\n    window.addEventListener(\"click\", handleClose); // clean up\n\n    return () => window.removeEventListener(\"click\", handleClose);\n  }, [isOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: ddStyles.ddWrapper,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: ddStyles.ddHeader,\n      onClick: toggleList,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: ddStyles.ddHeaderTitle,\n        children: props.timeZones.find((x, i) => x.value === props.timeZone).title + `(${moment().tz(props.timeZone).format(\"LT\")})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: isOpen ? /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"angle-up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(FontAwesome, {\n          name: \"angle-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dropdownRef,\n      role: \"list\",\n      className: ddStyles.ddList,\n      children: props.timeZones.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: props.timeZone == item.value ? ddStyles.ddListItemSelected : ddStyles.ddListItem,\n        onClick: () => {\n          props.setTimeZone(item.value);\n          toggleList();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: moment(new Date()).tz(item.value).format(\"LT\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["/home/encora/Documents/projects/testDrive/tdn/components/pick-date-time/dropDown.js"],"names":["React","useState","useEffect","useRef","ddStyles","FontAwesome","moment","Dropdown","props","isOpen","setIsOpen","dropdownRef","toggleList","handleClose","event","current","contains","target","window","addEventListener","removeEventListener","ddWrapper","ddHeader","ddHeaderTitle","timeZones","find","x","i","value","timeZone","title","tz","format","ddList","map","item","index","ddListItemSelected","ddListItem","setTimeZone","Date"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ddStyles from \"./../../styles/Dropdown.module.css\";\nimport FontAwesome from \"react-fontawesome\";\nimport moment from \"moment\";\nconst Dropdown = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const toggleList = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    // only adds the event listener when the dropdown is opened\n    if (!isOpen) return;\n    function handleClose(event) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    }\n    window.addEventListener(\"click\", handleClose);\n    // clean up\n    return () => window.removeEventListener(\"click\", handleClose);\n  }, [isOpen]);\n  return (\n    <div className={ddStyles.ddWrapper}>\n      <button type=\"button\" className={ddStyles.ddHeader} onClick={toggleList}>\n        <span className={ddStyles.ddHeaderTitle}>\n          {props.timeZones.find((x, i) => x.value === props.timeZone).title +\n            `(${moment().tz(props.timeZone).format(\"LT\")})`}\n        </span>{\" \"}\n        <span className=\"ml-2\">\n          {isOpen ? (\n            <FontAwesome name=\"angle-up\" />\n          ) : (\n            <FontAwesome name=\"angle-down\" />\n          )}\n        </span>\n      </button>\n      {isOpen && (\n        <div ref={dropdownRef} role=\"list\" className={ddStyles.ddList}>\n          {props.timeZones.map((item, index) => (\n            <div\n              className={\n                props.timeZone == item.value\n                  ? ddStyles.ddListItemSelected\n                  : ddStyles.ddListItem\n              }\n              key={index}\n              onClick={() => {\n                props.setTimeZone(item.value);\n                toggleList();\n              }}\n            >\n              <div>{item.title}</div>{\" \"}\n              <div>{moment(new Date()).tz(item.value).format(\"LT\")}</div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}